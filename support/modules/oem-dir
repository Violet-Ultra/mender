#!/bin/sh

#
# Update Module copied from 'directory' module
#
# NOTE: 
# This version requires a reboot so that any updated start scripts get run.
# This version does NOT support rollback due to the previous dir being stored
# in /tmp/ which will be lost during the reboot.
#

set -e

STATE="$1"
FILES="$2"

#prev_files_tar="$FILES"/tmp/prev_files.tar
update_files_tar="$FILES"/files/update.tar
#dest_dir_file="$FILES"/files/dest_dir

case "$STATE" in

    NeedsArtifactReboot)
        echo "Automatic"
        ;;

    SupportsRollback)
        echo "No"
        ;;

    ArtifactInstall)
        echo "beginning of ArtifactInstall"
        # Allow commands (e.g. kill_main.sh) to fail otherwise it will exit and
        # prevent the update from happening
        set +e
        # Kill off main app if it's running
        /oem/kill_main.sh
        /oem/show_msg.sh "Update in progress, please wait..." &
        # Sleep for a second so that the update screen is seen before
        # everything gets deleted
        sleep 1
        dest_dir=/oem
        rm -rf ${dest_dir}/*
        tar -xf ${update_files_tar} -C ${dest_dir}
        # If got to here then can remove the production seal
        rm -f /oem/prod_seal

        # NOTE: We're now using the NEW directory contents, so anything we
        # do depends on it, i.e. the next line will fail if it's now no
        # longer available
        /oem/show_msg.sh "Rebooting, please wait..." &
        sleep 1
        killall msg_screen.py
        echo "End of ArtifactInstall"
        ;;
    
    ArtifactRollback)
        test -f $prev_files_tar || exit 0
        dest_dir=$(cat $dest_dir_file)
        test -z "$dest_dir" && \
            echo "Fatal error: dest_dir is undefined." && exit 1
        test "$dest_dir" = "/" && \
            echo "Info: destination dir is '/', not performing rollback." && exit 0
        rm -rf ${dest_dir}
        mkdir -p ${dest_dir}
        tar -xf ${prev_files_tar} -C ${dest_dir}
        ;;
esac

exit 0

